import org.apache.tools.ant.taskdefs.condition.Os
import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.7
targetCompatibility = 1.7

ext {
    release = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

buildscript {
    repositories {
        repositories {
            maven { url 'http://jcenter.bintray.com' }
        }
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:1.10.0'
    }
}

apply plugin: 'shadow'
apply plugin: 'os-package-base'

repositories {
    mavenCentral()
}

dependencies {
    compile ("com.yammer.dropwizard:dropwizard-core:0.6.2") {
        exclude group: 'org.eclipse.jetty.orbit'
    }
    compile "org.apache.geronimo.specs:geronimo-servlet_3.0_spec:1.0"
    compile 'org.projectlombok:lombok:0.11.6'
    compile "org.springframework:spring-web:$springVersion"
    compile "javax.inject:javax.inject:1"

    compile "org.springframework.security:spring-security-web:$springSecurityVersion"
    compile "org.springframework.security:spring-security-config:$springSecurityVersion"
    compile "org.springframework.security:spring-security-aspects:$springSecurityVersion"

}

jar {
    manifest {
        attributes 'Main-Class': 'com.github.jacek99.myapp.MyAppService'
        attributes 'Implementation-Title': 'MyApp' ,'Implementation-Version': version
    }
}


task run(dependsOn: 'classes', type: JavaExec) {
    main = 'com.github.jacek99.myapp.MyAppService'
    classpath = sourceSets.main.runtimeClasspath
    args 'server','myapp.yml'
}

task runShadow(type:Exec, dependsOn: 'shadowJar') {
    workingDir = "build/libs"
    commandLine = ['java', '-jar', '-server', "myapp-$version-shadow.jar",'server','../../myapp.yml']
}

task bdd(type: Exec, dependsOn: 'shadowJar') {
    description = "Tests BDDs against the running application"
    
    // fix to run cucumber on a particular infernal OS properly
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'bundle.bat', 'exec', 'cucumber'
    }
    else {
        commandLine = ['cucumber']
    }
    workingDir = "./src/test/resources/bdd" 
    def oneJarProcess = null

    doFirst{
        println "Starting application on separate thread..."
        Thread.startDaemon {
            oneJarProcess = "java -jar -server build/libs/myapp-$version-shadow.jar server myapp.yml".execute()
        }
        println "Waiting for application to start before executing tests..."
        addShutdownHook {
            println "Shutting down application"
            oneJarProcess.destroy()
        }
    }

}

/**
 * NATIVE LINUX PACKAGING SUPPORT
 */

// common for both deb and rpm
ospackage {

    packageName = 'myapp'
    version = "1.2"
    release = project.ext.release
    arch = NOARCH
    os = LINUX
    summary = "MyApp"
    description 'Dropwizard sample app'
    vendor = 'Jacek Furmankiewicz'
    url = 'https://github.com/jacek99'
    user 'root'

    into '/opt/myapp'

    //application executable
    from('build/distributions') {
        user 'root'
        include "myapp-$version-shadow.jar"
    }

    // YAML application configuration file + init config files
    from('src/deploy/resources/config') {
        user 'root'
        fileType = CONFIG | NOREPLACE
    }

    // symlink to common name, regardless of version, in order for init scripts to work
    link('/opt/myapp/myapp-shadow.jar', "/opt/myapp/myapp-$version-shadow.jar")
}

//must run 'clean shadow' before it
task rpm (type: Rpm, dependsOn: 'shadowJar') {
    postInstall = file('src/deploy/resources/rpm/postinst')
    preUninstall = file('src/deploy/resources/rpm/prerm')

    requires('java-1.7.0-openjdk')

    //systemd configuration for Fedora
    link('/etc/systemd/system/myapp.service', '/opt/myapp/etc/service/systemd/myapp.service')
    link('/opt/myapp/environment', '/opt/myapp/etc/service/systemd/environment', )

    //Upstart file for CentOS/RHEL, customized compared to the Debian version, since CentOS has older version of upstart usually
    //link('/etc/init/myapp.conf', '/opt/myapp/etc/service/upstart/centos/myapp.conf')

    from('src/deploy/resources/config/etc/service/upstart/centos') {
        user 'root'
        into '/etc/init'
        fileType = CONFIG | NOREPLACE
    }

}

task deb (type: Deb, dependsOn: 'shadowJar') {
    preUninstall = file('src/deploy/resources/deb/prerm')

    requires('openjdk-7-jre')

    //Upstart file for Debian, customized compared to the CentOS version
    link('/etc/init/myapp.conf', '/opt/myapp/etc/service/upstart/debian/myapp.conf')
}

// add explicit task dependencies
shadowJar.dependsOn "clean"



